{"version":3,"sources":["Editor.js","testRules.js","App.js","reportWebVitals.js","index.js"],"names":["window","MonacoEnvironment","getWorker","workerId","label","YamlWorker","EditorWorker","Editor","props","editorRef","useRef","useState","currentEditor","setcurrentEditor","setDiagnosticsOptions","validate","enableSchemaRequest","format","hover","completion","schemas","uri","fileMatch","schema","useEffect","current","console","log","editor","create","language","theme","setValue","value","ref","style","width","height","ruleSchema","testRules","name","App","fileName","setFileName","rule","disabled","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRAYAA,OAAOC,kBAAoB,CACvBC,UADuB,SACbC,EAAUC,GAChB,MAAc,SAAVA,EACO,IAAIC,IAER,IAAIC,MAsDJC,MAjDf,SAAgBC,GACZ,IAAMC,EAAYC,mBAClB,EAA0CC,qBAA1C,mBAAOC,EAAP,KAAsBC,EAAtB,KAwCA,OAtCAC,YAAsB,CAClBC,UAAU,EACVC,qBAAqB,EACrBC,QAAQ,EACRC,OAAO,EACPC,YAAY,EACZC,QAAS,CACL,CAEIC,IAAK,8BAELC,UAAW,CAAC,KACZC,OAAQf,EAAMe,WAM1BC,qBAAU,WACFf,EAAUgB,UACVC,QAAQC,IAAIlB,EAAUgB,SACtBZ,EAAiBe,IAAOC,OAAOpB,EAAUgB,QAAS,CAC9CK,SAAU,OACVC,MAAO,gBAIhB,IAGHP,qBAAU,WACFZ,GACAA,EAAcoB,SAASxB,EAAMyB,SAElC,CAACrB,EAAeJ,EAAMyB,QAKrB,mCACI,qBAAKC,IAAKzB,EAAW0B,MAAO,CAAEC,MAAO5B,EAAM4B,MAAOC,OAAQ7B,EAAM6B,aClEtEC,EACN,CACI,GAAM,8BACN,KAAQ,SACR,YAAe,oCACf,WAAc,CACV,OAAU,CACN,KAAQ,UAEZ,QAAW,CACP,KAAQ,UAEZ,UAAa,CACT,KAAQ,SACR,WAAc,CACV,aAAgB,CAAE,KAAQ,WAE9B,sBAAwB,GAE5B,UAAa,CACT,KAAQ,UAEZ,YAAe,CACX,KAAQ,UAEZ,YAAe,CACX,KAAQ,UAEZ,OAAU,CACN,KAAQ,UAEZ,YAAa,CACT,KAAQ,UAEZ,QAAW,CACP,KAAQ,UAEZ,UAAa,CACT,KAAQ,WAGhB,sBAAwB,GAyGtBC,EAAY,CACd,aAAc,CACVC,KAAM,aACNP,MAzGG,8pBA2GP,aAAc,CACVO,KAAM,aACNP,MA3EG,ypBA6EP,aAAc,CACVO,KAAM,aACNP,MA7CG,0pBC5EIQ,MA9Bf,WAEE,MAAgC9B,mBAAS,cAAzC,mBAAO+B,EAAP,KAAiBC,EAAjB,KACMC,EAAOL,EAAUG,GAEvB,OACE,qCACE,wBACEG,SAAuB,eAAbH,EACVI,QAAS,kBAAMH,EAAY,eAF7B,wBAMA,wBACEE,SAAuB,eAAbH,EACVI,QAAS,kBAAMH,EAAY,eAF7B,wBAMA,wBACEE,SAAuB,eAAbH,EACVI,QAAS,kBAAMH,EAAY,eAF7B,wBAMA,cAAC,EAAD,CAAQpB,OAAQe,EAAYL,MAAOW,EAAKX,MAAOG,MAAO,IAAKC,OAAQ,UCnB1DU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.96ef62bc.chunk.js","sourcesContent":["import './App.css';\r\nimport React, { useState, useRef, useEffect } from \"react\";\r\nimport { editor } from 'monaco-editor';\r\nimport { setDiagnosticsOptions } from 'monaco-yaml';\r\n\r\n// NOTE: using loader syntax becuase Yaml worker imports editor.worker directly and that\r\n// import shouldn't go through loader syntax.\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport EditorWorker from 'worker-loader!monaco-editor/esm/vs/editor/editor.worker?filename=editor.worker.js';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport YamlWorker from 'worker-loader!monaco-yaml/lib/esm/yaml.worker?filename=yaml.worker.js';\r\n\r\nwindow.MonacoEnvironment = {\r\n    getWorker(workerId, label) {\r\n        if (label === 'yaml') {\r\n            return new YamlWorker();\r\n        }\r\n        return new EditorWorker();\r\n    },\r\n};\r\n\r\n\r\nfunction Editor(props) {\r\n    const editorRef = useRef();\r\n    const [currentEditor, setcurrentEditor] = useState();\r\n\r\n    setDiagnosticsOptions({\r\n        validate: true,\r\n        enableSchemaRequest: true,\r\n        format: true,\r\n        hover: true,\r\n        completion: true,\r\n        schemas: [\r\n            {\r\n                // Id of the first schema\r\n                uri: \"https://cdisc.org/rules/1-0\",\r\n                // Associate with our model\r\n                fileMatch: ['*'],\r\n                schema: props.schema\r\n            },\r\n        ],\r\n    });\r\n\r\n    /* Initialize the editor */\r\n    useEffect(() => {\r\n        if (editorRef.current) {\r\n            console.log(editorRef.current)\r\n            setcurrentEditor(editor.create(editorRef.current, {\r\n                language: 'yaml',\r\n                theme: \"vs-dark\",\r\n                //path: rule.name,\r\n            }));\r\n        }\r\n    }, []);\r\n\r\n    /* Load the editor with a new value */\r\n    useEffect(() => {\r\n        if (currentEditor) {\r\n            currentEditor.setValue(props.value);\r\n        }\r\n    }, [currentEditor, props.value]);\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div ref={editorRef} style={{ width: props.width, height: props.height }} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Editor;","const ruleSchema =\r\n{\r\n    \"id\": \"https://cdisc.org/rules/1-0\",\r\n    \"type\": \"object\",\r\n    \"description\": \"Validation schema CDISC Rules 1.0\",\r\n    \"properties\": {\r\n        \"CoreId\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"Version\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"Authority\": {\r\n            \"type\": \"object\",\r\n            \"properties\": {\r\n                \"Organization\": { \"type\": \"string\" }\r\n            },\r\n            \"additionalProperties\": false\r\n        },\r\n        \"Reference\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"Description\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"Sensitivity\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"Scopes\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"Rule Type\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"Outcome\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"Citations\": {\r\n            \"type\": \"string\"\r\n        }\r\n    },\r\n    \"additionalProperties\": false\r\n};\r\n\r\nconst rule1 = `\r\nCoreId: Rule271828\r\nVersion: 1\r\nAuthority:\r\n    Organization: CDISC\r\nReference:\r\n    Origin: SDTM Conformance Rules\r\n    Version: 1.1\r\n    Id: CG0082\r\nDescription: Verify...\r\nSensitivity: Record\r\nScopes:\r\n    Standards:\r\n    - Name: SDTMIG\r\n        Version: 3.3\r\n    - Name: SDTMIG\r\n        Version: 3.4\r\n    Classes:\r\n    Include:\r\n        - Events\r\n        - Findings\r\n    Domains:\r\nRule Type:\r\n    Value Presence:\r\n    Conditions: --BODSYS IS NULL\r\n    Check: --BDSYCD IS NOT NULL\r\nOutcome:\r\n    Message: --BDSYCD is populated when --BODSYS is null\r\nCitations:\r\n    - Document: SDTM v1.4\r\n    Section: 2.2.2\r\n    Cited Guidance: Variable Qualifier of --BODSYS\r\n`;\r\n\r\nconst rule2 = `\r\nCoreId: Rule2\r\nVersion: 1\r\nAuthority:\r\n    Organization: CDISC\r\nReference:\r\n    Origin: SDTM Conformance Rules\r\n    Version: 1.1\r\n    Id: CG0082\r\nDescription: Verify...\r\nSensitivity: Record\r\nScopes:\r\n    Standards:\r\n    - Name: SDTMIG\r\n        Version: 3.3\r\n    - Name: SDTMIG\r\n        Version: 3.4\r\n    Classes:\r\n    Include:\r\n        - Events\r\n        - Findings\r\n    Domains:\r\nRule Type:\r\n    Value Presence:\r\n    Conditions: --BODSYS IS NULL\r\n    Check: --BDSYCD IS NOT NULL\r\nOutcome:\r\n    Message: --BDSYCD is populated when --BODSYS is null\r\nCitations:\r\n    - Document: SDTM v1.4\r\n    Section: 2.2.2\r\n    Cited Guidance: Variable Qualifier of --BODSYS\r\n`;\r\n\r\nconst rule3 = `\r\nCoreId: Rule3\r\nVersion: 1\r\nAuthority:\r\n    Organization: CDISC\r\nReference:\r\n    Origin: SDTM Conformance Rules\r\n    Version: 1.1\r\n    Id: CG0082\r\nDescription: Verify...\r\nSensitivity: Record\r\nScopes:\r\n    Standards:\r\n    - Name: SDTMIG\r\n        Version: 3.3\r\n    - Name: SDTMIG\r\n        Version: 3.4\r\n    Classes:\r\n    Include:\r\n        - Events\r\n        - Findings\r\n    Domains:\r\nRule Type:\r\n    Value Presence:\r\n    Conditions: --BODSYS IS NULL\r\n    Check: --BDSYCD IS NOT NULL\r\nOutcome:\r\n    Message: --BDSYCD is populated when --BODSYS is null\r\nCitations:\r\n    - Document: SDTM v1.4\r\n    Section: 2.2.2\r\n    Cited Guidance: Variable Qualifier of --BODSYS\r\n`;\r\n\r\nconst testRules = {\r\n    \"rule1.yaml\": {\r\n        name: \"rule1.yaml\",\r\n        value: rule1\r\n    },\r\n    \"rule2.yaml\": {\r\n        name: \"rule2.yaml\",\r\n        value: rule2\r\n    },\r\n    \"rule3.yaml\": {\r\n        name: \"rule3.yaml\",\r\n        value: rule3\r\n    },\r\n};\r\n\r\nexport { testRules, ruleSchema };\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import './App.css';\r\nimport React, { useState } from \"react\";\r\nimport Editor from \"./Editor\";\r\nimport { testRules, ruleSchema } from \"./testRules\";\r\n\r\n\r\nfunction App() {\r\n\r\n  const [fileName, setFileName] = useState(\"rule1.yaml\");\r\n  const rule = testRules[fileName];\r\n\r\n  return (\r\n    <>\r\n      <button\r\n        disabled={fileName === \"rule1.yaml\"}\r\n        onClick={() => setFileName(\"rule1.yaml\")}\r\n      >\r\n        rule1.yaml\r\n      </button>\r\n      <button\r\n        disabled={fileName === \"rule2.yaml\"}\r\n        onClick={() => setFileName(\"rule2.yaml\")}\r\n      >\r\n        rule2.yaml\r\n      </button>\r\n      <button\r\n        disabled={fileName === \"rule3.yaml\"}\r\n        onClick={() => setFileName(\"rule3.yaml\")}\r\n      >\r\n        rule3.yaml\r\n      </button>\r\n      <Editor schema={ruleSchema} value={rule.value} width={800} height={600} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}